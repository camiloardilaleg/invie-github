#CONFIGURACIONES DE ENTORNO
git config --global user.email
git config --global user.name
git config --global color.ui true
REFERENCIA: https://git-scm.com/docs/git-config

#COMANDOS DE TERMINAL
rm -rf <name_file> --> para borrar carpetas

#COMANDOS GIT
git init <nombre_repositorio> : crea un repositorio con el nombre indicado, caso contrario, hace al directorio actual el nuevo repositorio
rm -rf .git : borra el repositorio git

git status : miramos el estado de los archivos, rojo es que no esta "tracked"
git add <file_name> : pone al archivo en la stating area
git add - n <file_name> : nos sirve para ver que archivos podemos agregar
git add -A : agrega todos los archivos

git rm  --cached <name_file> : para unstaged
git rm -f <name_file> : borra definitivamente el archivo

git commit -m "<Mensaje en el commit>"
git commit -m "<Mensaje en el commit>" --amend : me permite concatenar el comit con el anterior

git log : sirve para ver todos los commits

git tag 0.5 : version ligera
git tag -a 0.5 -m 'Version estable del proyecto' : version anotada
git tag -l : lista todos los tag
git tag 0.3 b6ac265e234ca9f762f164d592f474b25e0d457e : etiqueta un commit determinado
git tag -d <version_a_borrar>
git tag -f -a <n_verision> -m '<mensaje>' b6ac265e234ca9f762f164d592f474b25e0d457e: para renombrar un tag

#COMANDO GIT LOG 
git log --oneline : muestra en una linea el commit, omitiendo cierta informaci√≥n
git log --oneline --graph :mira las ramas
git log -4 : los ultimos 4 commits

#VER DIFERENCIAS ENTRE commits  
git diff <version_antigua> <Version_nueva>
git diff ab56c70 b24a807 : se mira la diferencia entre los dos commists

#VOLVER EN EL TIEMPO
git reset --[soft, mixed, hard] <sha-#>: hay tres tipos de reset, se escoge uno
    --soft: quita el ultimo commit, y los deja en la staging area
    --mixed: quita el ultimo commit, y los deja en la working area
    --hard


